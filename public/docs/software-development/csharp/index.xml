<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# Notes on Johnny To</title>
    <link>https://jto.dev/docs/software-development/csharp/</link>
    <description>Recent content in C# Notes on Johnny To</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jto.dev/docs/software-development/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pro C# 10 with .NET 6 by Andrew Troelsen</title>
      <link>https://jto.dev/docs/software-development/csharp/pro-c%23-10-with-.net-6/</link>
      <pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://jto.dev/docs/software-development/csharp/pro-c%23-10-with-.net-6/</guid>
      <description>&lt;pre&gt;&lt;code&gt;Author: Johnny To&#xA;Publish Date: 2025-04-05&#xA;Last Modified: 2025-04-06&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h1 id=&#34;chapter-1-notes&#34;&gt;Chapter 1 Notes &lt;a href=&#34;#chapter-1-notes&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;managed-vs-unmanaged-code&#34;&gt;Managed vs Unmanaged code &lt;a href=&#34;#managed-vs-unmanaged-code&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;Managed code - term used to describe the code targeting the .NET runtime.&lt;/li&gt;&#xA;&lt;li&gt;Assembly - a binary unit that contains the managed code.&lt;/li&gt;&#xA;&lt;li&gt;Unmanaged code - Code that cannot be directly hosted by the .NET runtime.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Can still be accessed from a C# program, but it locks you into a specific development and deployment target.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;other-net-aware-programming-languages&#34;&gt;Other .NET-Aware Programming Languages &lt;a href=&#34;#other-net-aware-programming-languages&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;Visual Basic&lt;/li&gt;&#xA;&lt;li&gt;F#&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;overview-of-net-assemblies&#34;&gt;Overview of .NET Assemblies &lt;a href=&#34;#overview-of-net-assemblies&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;.NET Binaries take the same file extension as unmanaged Windows binaries &lt;code&gt;(*.dll)&lt;/code&gt; while having no internal similarities.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;.NET Binaries contain platform-agnostic Intermediate Language (IL) and type metadata.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;*.dll&lt;/code&gt; files created using a .NET compiler, the binary blob is termed an assembly.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;4 Basic Properties of this file&#xA;&lt;ul&gt;&#xA;&lt;li&gt;.NET Projects are always compiled to a file with a .dll extension even if the project is an executable.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Even if the project is an executable, can still be executed with the command &lt;code&gt;dotnet &amp;lt;assembly name&amp;gt;.dll&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;dotnet.exe&lt;/code&gt; is actually copied to the build directory and renamed &lt;code&gt;&amp;lt;assembly name&amp;gt;.exe&lt;/code&gt; which will then&#xA;execute &lt;code&gt;dotnet &amp;lt;assembly name&amp;gt;.dll&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;*.exe&lt;/code&gt; is not even the actual project&amp;rsquo;s code, just a convenient shortcut to running your application.&lt;/li&gt;&#xA;&lt;li&gt;Even if the application is a single file that is executed directly. It&amp;rsquo;s only a packaging convenience.&#xA;It contains all the files needed to run the application and sometimes the .NET runtime included. However,&#xA;the code is still running in a managed container just as if it were published as multiple files.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Assembly contains CIL (Common Intermediate Language) code.&lt;/li&gt;&#xA;&lt;li&gt;Assembly contains metadata that describes in detail the characteristics of every &lt;code&gt;type&lt;/code&gt; within the binary.&lt;/li&gt;&#xA;&lt;li&gt;Contains a &lt;code&gt;manifest&lt;/code&gt; that has information about the current version of the assembly, culture information, and a list of all externally&#xA;referenced assemblies that are required for proper execution.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;common-intermediate-language-cil&#34;&gt;Common Intermediate Language (CIL) &lt;a href=&#34;#common-intermediate-language-cil&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;Sits above any particular platform-specific instruction set.&lt;/li&gt;&#xA;&lt;li&gt;C# compiler emits CIL, not platform specific instructions.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;For example, if you have a Calc.cs (Calculator class) that is compiled.&#xA;It would produce a &lt;code&gt;.dll&lt;/code&gt; assembly that contains a manifest, CIL instructions and metadata describing each aspect of the Calc and Program classes.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Can output IL (Intermediate Language) of an assembly using &lt;code&gt;ildasm.exe&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Doesn&amp;rsquo;t matter if C# or Visual Basic or F#. You will find similar instructions when examining the CIL.&lt;/li&gt;&#xA;&lt;li&gt;Benefit is that it allows language integration.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;cil-to-platform-specific-instructions&#34;&gt;CIL to Platform-Specific Instructions &lt;a href=&#34;#cil-to-platform-specific-instructions&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;Done by being compiled on the fly by a JIT compiler (also named jitter).&lt;/li&gt;&#xA;&lt;li&gt;The .NET runtime environment leverages a JIT compiler for each CPU targeting the runtime, each optimized for the underlying platform.&lt;/li&gt;&#xA;&lt;li&gt;A single body of code can be efficiently JIT compiled and executed on machines with different architectures.&lt;/li&gt;&#xA;&lt;li&gt;Jitter has a built in cache to avoid recompiling CIL. For example, if a method was compiled and ran once, then was needed to run again.&lt;/li&gt;&#xA;&lt;li&gt;Can pre-JIT code using &lt;code&gt;crossgen.exe&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;net-type-metadata&#34;&gt;.NET Type Metadata &lt;a href=&#34;#net-type-metadata&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;Job of the compiler to generate the assembly&amp;rsquo;s metadata.&lt;/li&gt;&#xA;&lt;li&gt;Describes every type (e.g. class, structure, enumeration) defined in the binary and the members of each type (e.g. properties, methods, and events).&lt;/li&gt;&#xA;&lt;li&gt;IntelliSense feature in Visual Studio is only possible by reading an assembly&amp;rsquo;s metadata at design time.&lt;/li&gt;&#xA;&lt;li&gt;Also, it is used by various object-browsing utilities, debugging tools, and the C# compiler itself.&lt;/li&gt;&#xA;&lt;li&gt;It is the backbone of numerous .NET technologies including reflection, late beinding and object serialization.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;assembly-manifest&#34;&gt;Assembly Manifest &lt;a href=&#34;#assembly-manifest&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;Metadata that describes the assembly itself.&lt;/li&gt;&#xA;&lt;li&gt;Documents all external assemblies required by the current assembly to function correctly.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The assembly&amp;rsquo;s version number, copyright information, etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;The job of the compiler to generate the assembly&amp;rsquo;s manifest.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;common-type-system-cts&#34;&gt;Common Type System (CTS) &lt;a href=&#34;#common-type-system-cts&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Type&lt;/code&gt; refers to a member of the set {&lt;code&gt;class&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;structure&lt;/code&gt;, &lt;code&gt;enumeration&lt;/code&gt;, &lt;code&gt;delegate&lt;/code&gt;}.&lt;/li&gt;&#xA;&lt;li&gt;Example:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You have a &lt;code&gt;class&lt;/code&gt; that implements a number of &lt;code&gt;interfaces&lt;/code&gt; where an interface method takes an &lt;code&gt;enumeration type&lt;/code&gt; as a &lt;code&gt;parameter&lt;/code&gt; and returns a &lt;code&gt;structure&lt;/code&gt;&#xA;to the caller.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;However, only individuals who are deeply concerned with the inner workings of the CTS are those building tools and/or compilers that target the .NET platform.&lt;/li&gt;&#xA;&lt;li&gt;.NET Programmers need to learn how to work with the five types defined by the CTS in their language of choice.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;cts-class-type&#34;&gt;CTS Class Type &lt;a href=&#34;#cts-class-type&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;Cornerstone of &lt;code&gt;object-oriented programming (OOP)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;May be composed of an number of members such as&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Constructors&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Properties&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Methods&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Events&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;In C#, classes are declared using the &lt;code&gt;class&lt;/code&gt; keyword such as&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A C# class type with 1 method.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Calc&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; Add(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; addend1, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; addend2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; addend1 + addend2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CTS Class Characteristics&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Is the class &lt;code&gt;sealed&lt;/code&gt;?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Sealed classes&lt;/code&gt; cannot function as a base class to other classes.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Does the class implement any &lt;code&gt;interfaces&lt;/code&gt;?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;An &lt;code&gt;interface&lt;/code&gt; is a collection of abstract members that provides a contract between the object and object user.&lt;/li&gt;&#xA;&lt;li&gt;CTS allows a class to implement any number of interfaces.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Is the class &lt;code&gt;abstract&lt;/code&gt; or &lt;code&gt;concrete&lt;/code&gt;?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Abstract classes&lt;/code&gt; cannot be directly instantiated but are intended to define common behaviors for derived types.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Concrete classes&lt;/code&gt; can be instantiated directly.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;What is the &lt;code&gt;visibility&lt;/code&gt; of this class?&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Must be configured with a &lt;code&gt;visibility&lt;/code&gt; keyword such as &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;internal&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Controls whether the class may be used by external assemblies or only from within the defining assembly.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;cts-interface-type&#34;&gt;CTS Interface Type &lt;a href=&#34;#cts-interface-type&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;A named collection of abstract member definitions and/or default implementations which are implemented by a given class or structure.&lt;/li&gt;&#xA;&lt;li&gt;Defined using the &lt;code&gt;interface&lt;/code&gt; keyword.&lt;/li&gt;&#xA;&lt;li&gt;By convention, all .NET interfaces begin with the capital letter &lt;code&gt;I&lt;/code&gt; such as&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Usually decalred as public to allow types in other assemblies to implement their behavior.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IDraw&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; Draw();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;On their own, interfaces have little use.&lt;/li&gt;&#xA;&lt;li&gt;When a class or structureimplements a given interface in its unique way, you are able to request access to the supplied functionality&lt;/li&gt;&#xA;&lt;li&gt;using an interface reference in a polymorphic manner.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;cts-structure-type&#34;&gt;CTS Structure Type &lt;a href=&#34;#cts-structure-type&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;A lightweight class type having value-based semantics.&lt;/li&gt;&#xA;&lt;li&gt;Structures are best suited for modeling geometric and mathematical data.&lt;/li&gt;&#xA;&lt;li&gt;Created using the &lt;code&gt;struct&lt;/code&gt; keyword such as&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// A C# structure type.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Structures can contain fields.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; xPos, yPos;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Structures can contain parameterized constructors.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Point (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;{ xPos = x; yPos = y;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Strutures may define methods.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; PrintPosition()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Console.WriteLine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;({0}, {1})&amp;#34;&lt;/span&gt;, xPos, yPos);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;h3 id=&#34;cts-enumeration-type&#34;&gt;CTS Enumeration Type &lt;a href=&#34;#cts-enumeration-type&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;Allows you to group name-value pairs.&lt;/li&gt;&#xA;&lt;li&gt;Example, if you were creating a video game application that allows the player to select from three character categories (Wizard, Fighter, or Thief).&lt;/li&gt;&#xA;&lt;li&gt;Rather than using numerical values to represent each possibility, you could build a strongly typed enumeration using the &lt;code&gt;enum&lt;/code&gt; keyword.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; CharacterTypeEnum&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;Wizard = &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;Fighter = &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;Thief = &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;By default, the storage used to hold each item is a 32-bit integer. Can be altered if needed.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;cts-delegate-types&#34;&gt;CTS Delegate Types &lt;a href=&#34;#cts-delegate-types&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;.NET equivalent of a type-safe, C-style function pointer.&lt;/li&gt;&#xA;&lt;li&gt;.NET delegate is a class that derives from &lt;code&gt;System.MulticastDelegate&lt;/code&gt;, rather than a simple pointer to a raw memory address.&lt;/li&gt;&#xA;&lt;li&gt;Declared using the &lt;code&gt;delegate&lt;/code&gt; keyword.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-chsarp&#34; data-lang=&#34;chsarp&#34;&gt;//This C# delegate type can &amp;#34;point to&amp;#34; any method returning an int and taking two ints as input.&#xA;delegate int BinaryOp(int x, int y);&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Critical when you want to provide a way for one object to forward a call to another object and provide the foundation for the .NET event architecture.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;cts-type-members&#34;&gt;CTS Type Members &lt;a href=&#34;#cts-type-members&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;Most &lt;code&gt;types&lt;/code&gt; take any number of &lt;code&gt;members&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;A type member is constrained the the set&#xA;{&lt;code&gt;constructor&lt;/code&gt;, &lt;code&gt;finalizer&lt;/code&gt;, &lt;code&gt;static constructor&lt;/code&gt;, &lt;code&gt;nested type&lt;/code&gt;, &lt;code&gt;operator&lt;/code&gt;,&#xA;&lt;code&gt;method&lt;/code&gt;, &lt;code&gt;property&lt;/code&gt;, &lt;code&gt;indexer&lt;/code&gt;, &lt;code&gt;field&lt;/code&gt;, &lt;code&gt;readonly-field&lt;/code&gt;, &lt;code&gt;constant&lt;/code&gt;, &lt;code&gt;event&lt;/code&gt;}&lt;/li&gt;&#xA;&lt;li&gt;CTS defines &lt;code&gt;adornments&lt;/code&gt; that may be associated with a given member such as&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Given a &lt;code&gt;Visibility trait&lt;/code&gt; - public, private, protected.&lt;/li&gt;&#xA;&lt;li&gt;Declared as &lt;code&gt;abstract&lt;/code&gt; or &lt;code&gt;virtual&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt; - to enforce a polymorphic behavior on derived types.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;virtual&lt;/code&gt; - to define a canned, but overridable, implementation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Configured as &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;instance&lt;/code&gt;.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;static&lt;/code&gt; - bound at the class level.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;instance&lt;/code&gt; - bound at the object level.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;intrinsic-cts-data-types&#34;&gt;Intrinsic CTS Data Types &lt;a href=&#34;#intrinsic-cts-data-types&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;&#xA;&lt;li&gt;Well-defined set of fundamental data types.&lt;/li&gt;&#xA;&lt;li&gt;All .NET language keywords resolve to the same CTS type defined in an assembly named &lt;code&gt;mscorlib.dll&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-chsarp&#34; data-lang=&#34;chsarp&#34;&gt;CTS Data Type&#x9;&#x9;&#x9;C# Keyword&#xA;------------------------------------------&#xA;System.Byte&#x9;&#x9;&#x9;&#x9;byte&#xA;System.SByte&#x9;&#x9;&#x9;sbyte&#xA;System.Int16&#x9;&#x9;&#x9;short&#xA;System.Int32&#x9;&#x9;&#x9;int&#xA;System.Int64&#x9;&#x9;&#x9;long&#xA;System.UInt16&#x9;&#x9;&#x9;ushort&#xA;System.UInt32&#x9;&#x9;&#x9;uint&#xA;System.UInt64&#x9;&#x9;&#x9;ulong&#xA;System.Single&#x9;&#x9;&#x9;float&#xA;System.Double&#x9;&#x9;&#x9;double&#xA;System.Object&#x9;&#x9;&#x9;object&#xA;System.Char&#x9;&#x9;&#x9;&#x9;char&#xA;System.String&#x9;&#x9;&#x9;string&#xA;System.Decimal&#x9;&#x9;&#x9;decimal&#xA;System.Boolean&#x9;&#x9;&#x9;bool&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Unique keywords of a managed language are simply shorthand notations for a real type in the &lt;code&gt;System&lt;/code&gt; namespace.&lt;/li&gt;&#xA;&lt;li&gt;For example the following code snippet defines a 32-bit numerical variable in C#.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Define some &amp;#34;ints&amp;#34; in C#.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.Int32 j = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;common-language-specification-cls&#34;&gt;Common Language Specification (CLS) &lt;a href=&#34;#common-language-specification-cls&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;The CLS is a set of rules that describe in vivid detail the minimal and complet eset of features of a given .NET compiler must support to produce code that can be hosted by the&#xA;.NET Runtime, while at the same time be accessed in a uniform manner by all languages that target the .NET platform.&lt;/li&gt;&#xA;&lt;li&gt;CLS can be viewed as a subset of the full functionality defined by the CTS.&lt;/li&gt;&#xA;&lt;li&gt;The CLS is ultimately a set of rules that compiler builders must conform to if they intend their products to function seamlessly within the .NET universe.&lt;/li&gt;&#xA;&lt;li&gt;Each rule is defined a simple name (e.g. CLS Rule 6) and describes how this rule affects those who build compilers as well as those who interact with them.&lt;/li&gt;&#xA;&lt;li&gt;C# does define a number of programming constructs that are not CLS compliant.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;You can instruct the C# compiler to check your code for CLS compliance using a single .NET attribute.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;    &#xA;    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Tell the C# compiler to check for CLS compliance.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[assembly: CLSCompliant(true)]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;This instructs the C# compiler to check every line of code against the rules of the CLS. If violations are discovered, you receive a compiler warning and a description of the offending code.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;net-runtime&#34;&gt;.NET Runtime &lt;a href=&#34;#net-runtime&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;A collection of services that are required to execute a given compiled unit of code.&lt;/li&gt;&#xA;&lt;li&gt;.NET runtime provides a single, well-defined runtime layer that is shared by all languages and platforms that are .NET.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;assembly-vs-namespace-vs-type&#34;&gt;Assembly vs Namespace vs Type &lt;a href=&#34;#assembly-vs-namespace-vs-type&#34; class=&#34;anchor&#34; aria-hidden=&#34;true&#34;&gt;&lt;i class=&#34;material-icons align-middle&#34;&gt;link&lt;/i&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Framework libraries is to give developers a well-defined set of existing code to leverage in their applications.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
